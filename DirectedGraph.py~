from Graph import Graph, Vertex, Edge

class DirectedVertex(Vertex):
    pass

class DirectedEdge(Edge):
    def __repr__(self):
        """Return a string representation of the edge thisedge that can be
        evaluated as a Python expression."""
        return 'Edge(%s to %s)' %(repr(self[0]), repr(self[1]))

class DirectedGraph(Graph):
    def add_vertex(self, v):
        self[v] = [{}, {}]
    
    def add_edge(self, v, w):
        """
        Creates an edge FROM V TO W (in V's first dictionary).
        Adds same edge TO W FROM V (in W's second dicionary).
        """
        edge = Edge(v, w)
        self[v][0][w] = edge
        self[w][1][v] = edge
        
    def get_out_edge(self, v, w):
        """
        Tries to return the directed edge FROM V TO W. If no edge exists,
        returns None.
        """
        try:
            return self[v][0][w]
        except KeyError:
            return None

    has_out_edge = get_out_edge
    
    def get_in_edge(self, v, w):
        """
        Tries to return the directed edge TO V FROM W. Returns None if no such
        edge exists.
        """
        try:
            return self[w][1][v]
        except KeyError:
            return None
    
    has_in_edge = get_out_edge

    def remove_edge(self, v, w):
        """Deletes the directed edge FROM V TO W."""
        del self[v][0][w]
        del self[w][1][v]

    def edges(self):
        s = set()
        for l in self.itervalues():
            
